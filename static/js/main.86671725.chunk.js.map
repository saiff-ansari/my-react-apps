{"version":3,"sources":["components/Form.js","components/CB.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputValue","todo","state","handleInput","e","target","name","value","setState","handleOnSubmit","preventDefault","props","onSubmit","this","type","id","onChange","required","React","Component","GreenCheckbox","withStyles","root","color","green","checked","Checkbox","CheckboxLabels","useState","checkedG","FormControlLabel","control","event","label","ListItem","onEdit","editVal","item","myRef","createRef","onRemove","current","className","setTimeout","handleDelete","handleEditValue","handleCancel","handleSave","handleEdit","title","onClick","ref","List","onDelete","count","map","index","key","App","data","handleSubmit","newVal","handleRemove","filter","i","handleOnEdit","forEach","localStorage","setItem","JSON","stringify","dataStore","parse","getItem","console","log","length","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86671725.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass Form extends React.Component{\r\n    inputValue = {\r\n        todo: ''\r\n    }\r\n    state = this.inputValue;\r\n    handleInput = (e) => {\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.setState(this.inputValue);\r\n    }\r\n\r\n    render(){\r\n        const {todo} = this.state;\r\n        return(\r\n            <form onSubmit={this.handleOnSubmit}>\r\n                <input\r\n                type=\"text\"\r\n                name = \"todo\"\r\n                id=\"todo\"\r\n                value={todo}\r\n                onChange = {this.handleInput}\r\n                required \r\n                />\r\n                <button type=\"submit\">Add</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600]\r\n    }\r\n  },\r\n  checked: {}\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\nexport default function CheckboxLabels() {\r\n  const [state, setState] = React.useState({\r\n    checkedG: false\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n\r\n    <>\r\n    <FormControlLabel\r\n      control={\r\n        <GreenCheckbox\r\n          id = \"checkbox1\"\r\n          checked={state.checkedG}\r\n          onChange={handleChange}\r\n          name=\"checkedG\"\r\n        />\r\n        \r\n      }\r\n      label=\"Complete\"\r\n    />\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CB from './CB';\r\n\r\n\r\nclass ListItem extends React.Component{\r\n    \r\n\r\n    state = {\r\n        onEdit: false,\r\n        editVal: this.props.item\r\n    };\r\n    myRef = React.createRef();\r\n\r\n\r\n    onRemove = () => {\r\n        this.myRef.current.className = \"active\";\r\n        setTimeout(() =>{\r\n        this.props.handleDelete();\r\n        }, 200)\r\n    };\r\n\r\n    handleEditValue = e =>{\r\n        const{name, value} = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    onEdit = () => {\r\n        this.setState({onEdit: true})\r\n    }\r\n\r\n    handleCancel = () => {\r\n        const {editVal} = this.state;\r\n        \r\n        if(editVal === ''){\r\n            this.setState({editVal: this.props.item})\r\n        }\r\n        this.setState({onEdit: false});\r\n    };\r\n\r\n    handleSave = () => {\r\n        const {editVal} = this.state;\r\n        if(editVal === ''){\r\n            this.setState({editVal: this.props.item})\r\n        }else{\r\n            this.props.handleEdit(editVal, this.props.id);\r\n        }\r\n\r\n        this.setState({onEdit: false})\r\n    }\r\n\r\n    render(){        \r\n\r\n        const {item} = this.props;\r\n\r\n        if(this.state.onEdit){\r\n            return(\r\n                \r\n                <li> \r\n                    <input type=\"text\" \r\n                    value={this.state.editVal}\r\n                    name=\"editVal\" id=\"editVal\"\r\n                    onChange={this.handleEditValue}\r\n                    />\r\n                    <div className = \"row\">\r\n                        <i className=\"fa fa-check\" title=\"Save\" onClick={this.handleSave} />\r\n                        <i className=\"fa fa-times\" title=\"Cancel\"  onClick={this.handleCancel} />\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n\r\n        else{\r\n            return(\r\n            <li ref={this.myRef}> {item} \r\n                <div className = \"row\">\r\n                    \r\n                        <CB className=\"checkboxes\"/>\r\n                    \r\n                        <i className=\"fa fa-pencil\" title=\"Edit\" onClick={this.onEdit}/>\r\n                        <i className=\"fa fa-trash-o\" title=\"Delete\" onClick = {this.onRemove} />\r\n                        \r\n                </div>\r\n                \r\n            </li>\r\n            \r\n        );\r\n        }\r\n        \r\n            \r\n    };\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass List extends React.Component{\r\n    \r\n    render(){\r\n        const {todo, onDelete, onEdit, count} = this.props;\r\n        return(\r\n            <>\r\n            <ul>\r\n                {\r\n                    todo.map((item, index) =>{\r\n                        return <ListItem \r\n                        item={item.todo} \r\n                        key={index}\r\n                        handleDelete={() => {onDelete(index)}}\r\n                        handleEdit= {onEdit}\r\n                        id={index}\r\n                        />\r\n                    })\r\n                }\r\n                \r\n            </ul>\r\n            <h6>You have {count} tasks </h6>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport Form from './components/Form';\nimport List from './components/List';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component{\n  state = {\n    data:[]\n  };\n\n  handleSubmit = (newVal) => {\n    this.setState({data: [...this.state.data, newVal]})\n  };\n\n//Persistant Todo starts here\n  componentDidUpdate(){\n    localStorage.setItem('dataStore', JSON.stringify(this.state.data));\n  }\n\n  componentDidMount(){\n    const dataStore = JSON.parse(localStorage.getItem('dataStore'));\n    if(dataStore !== null){\n    this.setState({data: dataStore});\n  }\n  }\n\n\n  handleRemove = index => {\n    const {data} = this.state;\n    this.setState({\n      data: data.filter((item, i) => {\n        return i !== index\n      })\n    })\n  }\n\n  handleOnEdit = (editVal, index) => {\n    const {data} = this.state;\n    \n    data.forEach((item, i) => {\n      if(i === index){\n        item.todo = editVal;\n      }\n    });\n    this.setState({data: data});\n  }\n\n  render(){\n    const{data} = this.state;\n        console.log(data)\n    return(\n      <>\n      <div className=\"app\">\n        <h1>To-do List</h1>\n        \n        <Form onSubmit={this.handleSubmit} />\n        {data.length === 0 \n        ? <h4>Enter Tasks to Begin</h4>\n        : <List todo={data} \n          onDelete = {this.handleRemove} \n          onEdit = {this.handleOnEdit}\n          count = {data.length}\n        />\n      }\n      </div>\n      <a href=\"https://www.saifux96.wordpress.com\" className=\"footer\">Check my UX page here</a>\n      </>\n        \n    );\n  };\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}